ext {
    println("gradle version is ${gradleVersion}")
    println("jdk version is ${javaVersion}")
    println("kotlin version is ${kotlinVersion}")
    println("compile : detected JAVA_HOME=$System.env.JAVA_HOME")
    println("encoding : ${encoding}")
}

buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
    }
    repositories {
        mavenLocal()
        maven { url "${mavenCentralUrl}" }
        mavenCentral()
        jcenter()
    }
}

configure(allprojects) {

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-noarg'
    apply plugin: 'kotlin-jpa'
    apply plugin: 'idea'
    apply plugin: 'maven'

    apply from: "$rootDir/gradle/dependencies.gradle"

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    buildscript {
        repositories {
            mavenLocal()
            maven { url "${mavenCentralUrl}" }
            mavenCentral()
            jcenter()
        }
    }

    repositories {
        mavenLocal()
        maven { url "${mavenCentralUrl}" }
        mavenCentral()
        jcenter()
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-engine:$versions.jupiter")
        testCompile("org.junit.jupiter:junit-jupiter-api:$versions.jupiter")
        testCompile("org.junit.platform:junit-platform-launcher:$versions.junit_platform")
        testCompile "org.jetbrains.kotlin:kotlin-test"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit5"
        compile "org.jetbrains.kotlin:kotlin-stdlib"
        compile "org.jetbrains.kotlin:kotlin-reflect"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlin_coroutines"
    }

    kapt {
        javacOptions {
            // 增加注解处理器的最大错误次数
            // 默认为 100。
            option("-Xmaxerrs", 500)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "${encoding}"
    }
    tasks.withType(Javadoc) {
        options.encoding = "${encoding}"
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task clearPj(type: Delete) {
        delete 'release', 'build', 'target', 'out'
    }

    task copyJar(type: Copy) {
        from(configurations.runtime)
        into('build/libs/dependencies')
    }

    task mapperFileCopy(type: Copy) {
        copy {
            from("src/main/java") {
                include("**/*.xml")
                include("**/*.json")
                include("**/*.properties")
            }
            into("${buildDir}/classes/main")
        }
        copy {
            from("src/test/java") {
                include("**/*.xml")
                include("**/*.json")
                include("**/*.properties")
            }
            into("${buildDir}/classes/test")
        }
        copy {
            from("src/main/kotlin") {
                include("**/*.xml")
                include("**/*.json")
                include("**/*.properties")
            }
            into("${buildDir}/classes/main")
        }
        copy {
            from("src/test/kotlin") {
                include("**/*.xml")
                include("**/*.json")
                include("**/*.properties")
            }
            into("${buildDir}/classes/test")
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set("javadoc")
        from javadoc.destinationDir
    }

    task release(type: Copy, dependsOn: [build, copyJar]) {
    }

    jar {
        dependsOn(copyJar)
        manifest {
            attributes('Version': "${project.version}", 'Provider': "Gradle ${gradleVersion}", 'JDK': "${javaVersion}", 'Kotlin': "${kotlinVersion}", 'Project': 'Acp Admin Cloud')
        }
    }

    javadoc {
        options.charSet = "${encoding}"
        options.docEncoding = "${encoding}"
        options.encoding = "${encoding}"
    }

    compileJava {
        options.encoding = "${encoding}"
    }
    compileJava.dependsOn(processResources)

    compileTestJava {
        options.encoding = "${encoding}"
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "${javaVersion}"
        }
    }
    compileKotlin.dependsOn(processResources)

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "${javaVersion}"
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'// no caching to maven repository
    }

    def generateShell = { String appJarName ->
        File templateFile = new File("$rootDir/doc/script/server.model")
        List<String> lines = templateFile.readLines("UTF-8")
        StringBuffer buffer = new StringBuffer()
        for (String line : lines) {
            buffer.append(line).append("\n")
        }
        String shellContent = buffer.toString()
        shellContent = shellContent.replaceAll("@appJarName@", appJarName)
        File outFile = new File("$rootDir/release/$project.name/server.sh")
        Writer writer = new FileWriter(outFile)
        writer.write(new String(shellContent.getBytes("UTF-8")))
        writer.flush()
        writer.close()
    }

    build {
        doLast {
            def needCopy = {
                return ["admin-server",
                        "config-refresh-server",
                        "config-server",
                        "eureka-server",
                        "gateway-server",
                        "log-server",
                        "oauth-server",
                        "workflow-server",
                        "route-server"].toArray().contains("$project.name")
            }
            if (needCopy()) {
                def fileName = "$project.name" + "-" + "$project.version" + ".jar"
                copy {
                    from file("${buildDir}/libs/" + fileName)
                    into "$rootDir/release/$project.name"
                }
                if (project.name == "log-server") {
                    copy {
                        from "${buildDir}/resources/main"
                        into "$rootDir/release/$project.name"
                    }
                } else {
                    copy {
                        from("${buildDir}/resources/main") {
                            exclude("logback-spring.xml")
                        }
                        into "$rootDir/release/$project.name"
                    }
                }
                generateShell(fileName)
            }
        }
    }

}