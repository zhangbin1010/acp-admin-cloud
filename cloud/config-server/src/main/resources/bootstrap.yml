server:
  address: 127.0.0.1
  port: 8769
  tomcat:
    max-threads: 1000
    uri-encoding: UTF-8
info:
  version: 3.0.4
  app-name: ${spring.application.name}
  tags:
    environment: ${spring.profiles.active}
  build:
    author: zhangbin
    active: ${spring.profiles.active}
  instance-id: ${eureka.instance.instance-id}
management:
  server:
    port: 8768
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
# ===============================
# = Eureka Config
# ===============================
eureka:
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 15
    ip-address: ${server.address}
    instance-id: ${spring.application.name}:${server.address}:${server.port}:v${info.version}:${spring.profiles.active}
  client:
    registry-fetch-interval-seconds: 5
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka/
# ===============================
# = Log To File Config
# ===============================
logging:
  path: logs/config-server
  pattern:
    file: '[%date{yyyy-MM-dd HH:mm:ss.SSS}] [ %-5level] [%thread] %logger{96} [%X{lineno}] - %msg%n'
  file: ${logging.path}/${spring.application.name}.log
logging.file.max-size: 5MB
logging.file.max-history: 30
spring:
  profiles:
    active: jdbc
  application:
    name: config-server
  thymeleaf:
    cache: false
  zipkin:
    sender:
      type: kafka
  sleuth:
    sampler:
      probability: 1 #样本采集量，默认为0.1，为了测试这里修改为1，正式环境一般使用默认值。
  redis:
    url: redis://127.0.0.1:6379
  cloud:
    config:
      server:
        jdbc:
          sql: "SELECT config_KEY, config_VALUE from t_properties where config_APPLICATION=? and config_PROFILE=? and config_LABEL=? and enabled=1"
    stream:
      kafka:
        binder:
          brokers: 127.0.0.1:9092
  # ===============================
  # = JPA / HIBERNATE
  # ===============================
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
  # ===============================
  # = DATA SOURCE
  # ===============================
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/acp-admin?autoReconnect=true&failOverReadOnly=false&serverTimezone=UTC&useSSL=false
    username: root
    password: test
    driver-class-name: com.mysql.cj.jdbc.Driver
  data:
    jpa:
      repositories:
        bootstrap-mode: deferred
# ===============================
# = Ribbon Config
# ===============================
feign:
  httpclient:
    enabled: false
    connection-timeout: ${feign.client.config.default.connectTimeout}
    max-connections: 1000
    time-to-live: 900
    time-to-live-unit: seconds
    follow-redirects: true
  okhttp:
    enabled: true
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 10000
        readTimeout: 10000
        loggerLevel: full
      config-refresh-server:
        connectTimeout: 30000
        readTimeout: 30000
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 11000
    "ConfigRefreshServer#busRefresh()":
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 31000
    "ConfigRefreshServer#busRefresh(String)":
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 31000
    "ConfigRefreshServer#busRefreshMatcher(String)":
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 31000
ribbon:
  ServerListRefreshInterval: 5000
  ReadTimeout: ${hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds}
  ConnectTimeout: ${hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds}
  okhttp:
    enabled: true
  eager-load:
    enabled: true
    clients: config-refresh-server
# ===============================
# = Security Config
# ===============================
security:
  oauth2:
    client:
      client-id: 8a80cb816c0a5d4f016c0a5e0c020000
      client-secret: 2523342F2BD345EA9658452A289364AA
    resource:
      token-info-uri: http://oauth2-server/oauth/check_token
# ===============================
# = ACP Config
# ===============================
acp:
  cloud:
    oauth:
      resource-server-security-path:
        - /config
        - /config/**
      resource-server-permit-all-path: /**